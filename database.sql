-- MariaDB dump 10.19  Distrib 10.6.4-MariaDB, for Linux (x86_64)
--
-- Host: localhost    Database: blog
-- ------------------------------------------------------
-- Server version	10.6.4-MariaDB

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `blog`
--

DROP TABLE IF EXISTS `blog`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `blog`
(
    `id`          bigint(23) NOT NULL COMMENT 'blog id',
    `author_id`   bigint(23) NOT NULL COMMENT 'author id',
    `title`       varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'blog title',
    `text`        text COLLATE utf8mb4_unicode_ci         NOT NULL COMMENT 'blog context',
    `deleted`     int(11) NOT NULL DEFAULT 0 COMMENT 'logic delete',
    `create_time` datetime                                NOT NULL COMMENT 'create time',
    `update_time` datetime                                NOT NULL COMMENT 'update time',
    PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='blog table';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog`
--

LOCK
TABLES `blog` WRITE;
/*!40000 ALTER TABLE `blog` DISABLE KEYS */;
INSERT INTO `blog`
VALUES (1434670394391261186, 1428556050647941121, 'd', 'd', 0, '2021-09-06 08:10:51', '2021-09-06 08:10:51'),
       (1434672157261324290, 1428556050647941121, 'java爬虫--爬取pixiv原图--以作者ID下载其所有图片',
        '# 零.先行工作--maven导入htmlunit和fastjson\n```xml\n<dependency>\n        <groupId>net.sourceforge.htmlunit</groupId>\n        <artifactId>htmlunit</artifactId>\n        <version>2.47.1</version>\n</dependency>\n<dependency>\n        <groupId>com.alibaba</groupId>\n        <artifactId>fastjson</artifactId>\n        <version>1.2.75</version>\n</dependency>\n```\n- 下载一览\n- ![1.png](http://119.29.110.184/upload/2021/02/-1-713c586d6dfc4a2fba8f3cdc224e030f.png)\n# 一.怎么下载pixiv原图？\n1. 进入浏览器开发者模式，查看网络请求筛选img，点击原图\n![0.png](http://119.29.110.184/upload/2021/02/0-610cfe785cd140418c49db557ed55e64.png)\n2. 浏览器直接访问此地址会被拦截，因为没有设置request请求信息，request信息不正确\n- 正确的访问请求\n![1.png](http://119.29.110.184/upload/2021/02/1-151cb85a00c44d4aaa8a47aeb687cf3a.png)\n- 错误的访问请求\n![2.png](http://119.29.110.184/upload/2021/02/2-d886b4c844c54f26beb2f45b4cd123d5.png)\n3. 可以看到只要使用正确的请求头就可以下载到图片了\n# 二.下载一张图片小demo-使用junit测试\n```java\n@Test\n    public void downloadImage() throws IOException {\n        try{\n            //图片地址\n            URL url = new URL(\"https://i.pximg.net/img-original/img/2021/02/23/00/00/00/87977770_p0.png\");\n            //创建我自定义的浏览器\n            WebClient wc = new InitWebClient();\n            //设置我自定义的Request\n            WebRequest request = GetWebRequest.downloadImage(url);\n            //浏览器访问url并返回一个未知页面\n            UnexpectedPage page = wc.getPage(request);\n            //获取未知页面的输入流\n            InputStream is = page.getInputStream();\n            //文件输出流\n            FileOutputStream fos = new FileOutputStream(new File(\"D:\\\\download\\\\pixiv\\\\test.png\"));\n            //我自定义的文件下载方法\n            copy(is, fos);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n```\n1. 自定义的WebClient--继承了htmlunit的WebClient，并对此扩展\n```java\npackage xyz.zhezhi.util;\nimport com.gargoylesoftware.htmlunit.BrowserVersion;\nimport com.gargoylesoftware.htmlunit.NicelyResynchronizingAjaxController;\nimport com.gargoylesoftware.htmlunit.WebClient;\npublic class InitWebClient extends WebClient {\n    //无参构造方法\n    public InitWebClient() {\n        //浏览器版本-(Chrome浏览器)\n        new WebClient(BrowserVersion.CHROME);\n        //开启浏览器js\n        getOptions().setJavaScriptEnabled(true);\n        //关闭浏览器css\n        getOptions().setCssEnabled(false);\n        //浏览器超时8秒\n        getOptions().setTimeout(8000);\n        //js异常报错关闭\n        getOptions().setThrowExceptionOnScriptError(false);\n        //失败状态码异常（404，403）报错关闭\n        getOptions().setThrowExceptionOnFailingStatusCode(false);\n        //js超时\n        setJavaScriptTimeout(8000);\n        //ajax\n        setAjaxController(new NicelyResynchronizingAjaxController());\n        //等js加载完成,销毁js\n        waitForBackgroundJavaScript(8000);\n    }\n}\n```\n2. 自定义的WebRequest-对request请求标头进行设置，下载图片的请求方法downloadImage(URL url)\n```java\npackage xyz.zhezhi.util;\nimport com.gargoylesoftware.htmlunit.WebRequest;\nimport java.net.URL;\npublic class GetWebRequest {\n    public static WebRequest downloadImage(URL url) {\n        //我创建的随机使用user-agent的方法\n        String userAgent = RandomEnum.random(UserAgent.class).getUserAgent();\n        WebRequest request = new WebRequest(url);\n        request.setAdditionalHeader(\"accept\", \"image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8\");\n        request.setAdditionalHeader(\"accept-encoding\", \"gzip, deflate, br\");\n        request.setAdditionalHeader(\"accept-language\", \"zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6,zh-TW;q=0.5\");\n        request.setAdditionalHeader(\"cache-control\", \"no-cache\");\n        request.setAdditionalHeader(\"pragma\", \"no-cache\");\n        request.setAdditionalHeader(\"referer\", \"https://www.pixiv.net/\");\n        request.setAdditionalHeader(\"sec-fetch-dest\", \"image\");\n        request.setAdditionalHeader(\"sec-fetch-mode\", \"no-cors\");\n        request.setAdditionalHeader(\"sec-fetch-site\", \"cross-site\");\n//        request.setAdditionalHeader(\"user-agent\", \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36\");\n        request.setAdditionalHeader(\"user-agent\", userAgent);\n        return request;\n    }\n    public static WebRequest oneImageJson(URL url) {\n        WebRequest request = new WebRequest(url);\n        request.setAdditionalHeader(\"accept\", \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\");\n        request.setAdditionalHeader(\"accept-encoding\", \"gzip, deflate, br\");\n        request.setAdditionalHeader(\"accept-language\", \"zh-CN,zh;q=0.9,en;q=0.8\");\n        request.setAdditionalHeader(\"cache-control\", \"no-cache\");\n        request.setAdditionalHeader(\"cookie\", \"__cfduid=d31bf8061e1371f859eea2d567527bc191613299714; first_visit_datetime_pc=2021-02-14+19%3A48%3A34; p_ab_id=6; p_ab_id_2=4; p_ab_d_id=2103510959; yuid_b=GSJ2BUU; _ga=GA1.2.1600169290.1613300163; device_token=b0fc9f4c4caa89fb527f26e7c6eb08eb; c_type=19; a_type=0; b_type=1; ki_r=; _gid=GA1.2.1836889291.1613909199; ki_s=213428%3A0.0.0.0.0%3B214027%3A0.0.0.0.2; privacy_policy_agreement=2; ki_t=1613300223779%3B1613964403867%3B1613985066513%3B6%3B23; PHPSESSID=2e5aba8bqfpvn5t93kqi352j4subdioq; __cf_bm=b6eac98f6722f682946932b516092692504f5402-1614057653-1800-AbizCGIgYVkx6zn0A0bU3F+m13Z7MzQyyiR+X76D6oi7I79vWPN2CMy4d7uzS/yR6YfJGneybQ/GcTd2Kkr47YR9JgcFLCNsyjBdT4Oti3ZT2kUd+gy+r5QtAz96AU3bQEnauDttnp07XF8Gw26UEXw+50FGbACRxmoZnx0YOvd5oaR0k3UXW9MdrAnt2Pbfzg==; tag_view_ranking=RTJMXD26Ak~xwreRQ-lzj~RybylJRnhJ~nQRrj5c6w_~1yIPTg75Rl~Itu6dbmwxu~12t_DEuHDo~Lriz5mgtO4~gGjtVdrrFe~tIqkVZurKP~jhuUT0OJva~Ie2c51_4Sp~0EtqSNRiDe~t01hPAHKqg~azESOjmQSV~s0-wVQDZZJ~oQAJ7Y9_lW~uusOs0ipBx~0xsDLqCEW6~NXxDJr1D_u~9ODMAZ0ebV~2v9G8pB2PS~7Y-OaPrqAv~7hNKxCNyat~HK9KF4tyD-~2pZ4K1syEF~707BUIXeHg~48VzExzvzQ~3cUR6Nn84H~YXsA4N8tVW~IcyY_7-nC2~IJnEITfH6-~8lT4z8iAiO~AVxOflfaWu~ZxAyxs0UWi~-FJwc9peXF~kP7msdIeEU~0MW0m7pOLl~OT4SuGenFI~ZXFMxANDG_~h9r9YX0n2U~jH0uD88V6F~3W4zqr4Xlx~GHdWNxkeD5~Lt-oEicbBr~jxyzsYPyTO~I1GR-Ny8EP~6gXYYnxaeU~8dFowGZyeF~YGztdMd7pW~KN7uxuR89w~r01unnQL0a~_EOd7bsGyl~txZ9z5ByU7~KOnmT1ndWG~pzZvureUki~s1DI4r3R9d~1NmdBLOfGO~AcNKWXHNPL~Pe4jB778Kf~2_IEt5mZob~-pRI2U1PXF~ByLJlI4pD7~rqm6RvoxV0~uerejjHlp8~J92A0HwTlq~BU9SQkS-zU~81BOcT1ZAV~W2ednwy01A~y8GNntYHsi~65aiw_5Y72~Ms9Iyj7TRt~tf_8AgFGwP~WzCwLolQPu~e9iYT99pdE~OVgwA0CXji~tlXeaI4KBb~SLMy7-tHNo~wb0taLpkzz~qpeZSmEVVP~PV47zRqLi3~Mfi0aUOiFi~t7SGrCfglO~losiurMy1p~1Xn1rApx2-~mFuvKdN_Mu~dv45pUaHoT~8XX2eqWqNX~Oa9b6mEc1T~pYlUxeIoeg~tViQiL2bwy~wKl4cqK7Gl~g4eMkRcTOJ~B9VsvJr9Z4~cBvYFULzam~rA66hymxxP~c0WmLsFD2x\");\n        request.setAdditionalHeader(\"pragma\", \"no-cache\");\n        request.setAdditionalHeader(\"sec-fetch-dest\", \"document\");\n        request.setAdditionalHeader(\"sec-fetch-mode\", \"navigate\");\n        request.setAdditionalHeader(\"sec-fetch-site\", \"?1\");\n        request.setAdditionalHeader(\"upgrade-insecure-requests\", \"1\");\n        request.setAdditionalHeader(\"user-agent\", \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36\");\n        return request;\n    }\n    public static WebRequest json(URL url) {\n        String userAgent = RandomEnum.random(UserAgent.class).getUserAgent();\n        WebRequest request = new WebRequest(url);\n        request.setAdditionalHeader(\"accept\", \"application/json\");\n        request.setAdditionalHeader(\"accept-encoding\", \"gzip, deflate, br\");\n        request.setAdditionalHeader(\"accept-language\", \"zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6,zh-TW;q=0.5\");\n        request.setAdditionalHeader(\"cache-control\", \"no-cache\");\n        request.setAdditionalHeader(\"cookie\", \"__cfduid=d35ec5947379d00c972a150b862eca2701613294838; first_visit_datetime_pc=2021-02-14+18%3A27%3A18; p_ab_id=7; p_ab_id_2=2; p_ab_d_id=1749117321; yuid_b=GGkjNBk; device_token=df1d47a8697e8ce49ab35a94b0f72136; c_type=19; a_type=0; b_type=1; ki_r=; login_ever=yes; ki_s=213428%3A0.0.0.0.0%3B214027%3A0.0.0.0.2; __cf_bm=1376f17d80885d72667420825927c78ca122da1b-1613987316-1800-AYPjmBME38Cs3hmmkTy0yRdgXvSVwJmjyr/McXokgfIY+/n0r2HXlNLwtnZYslRrFht+DCO3dqefdKRU5/87yCJENxoPnHfadiBYWhXXzgG/; PHPSESSID=40925539_5VY0xKE45tKnc3sFaRPtB6DG7bD7jv19; privacy_policy_agreement=2; tag_view_ranking=RTJMXD26Ak~jH0uD88V6F~Lt-oEicbBr~Ie2c51_4Sp~0xsDLqCEW6~nQRrj5c6w_~KN7uxuR89w~xwreRQ-lzj~Bd2L9ZBE8q~SoxapNkN85~jxyzsYPyTO~I1GR-Ny8EP~6gXYYnxaeU~8dFowGZyeF~YGztdMd7pW~3W4zqr4Xlx~Itu6dbmwxu~Q-xqPAZ2m0~8XX2eqWqNX~tgP8r-gOe_~cbmDKjZf9z~kP7msdIeEU~0MW0m7pOLl~OT4SuGenFI~ZXFMxANDG_~h9r9YX0n2U~Oa9b6mEc1T~1Xn1rApx2-~5CuZ1ZlUzm~K8esoIs2eW~gGjtVdrrFe~g_bA2jnS8D~faHcYIP1U0~GNcgbuT3T-~GHdWNxkeD5~vm3O8ATOGG~pD0wVYlrjV~g7Vh3k_PFN~cLawdNMcQv~h3a3Az8bwQ~VLphRRg4wB~8lT4z8iAiO~-pRI2U1PXF~AVxOflfaWu~ByLJlI4pD7~zKLqKSPEAG~hk-lsGyvUu~OcphT8vZeM~XcLS3_HY73~eVxus64GZU~g4eMkRcTOJ~B9VsvJr9Z4~WzCwLolQPu~e9iYT99pdE~OVgwA0CXji~tIqkVZurKP~uusOs0ipBx~jhuUT0OJva~eT08r7a2y8~CiSfl_AE0h~RybylJRnhJ~_-agXPKuAQ~CsU1y07-7D~UZootLOo57~AH4pVaxknO~ZBoVMjk2oM~zvx49cnmJg~kZyLZDtxMx~ehwH_2D5wH~h8g1prF0k3~Dmx7slOKZk~kjfJ5uXq4m~x_jB0UM4fe~uR-u3dJm_l~S-WqdSaSiW~pnCQRVigpy~TmJBC3K3bw~3pgoJmFfG2~NzsShxkKo0~0cxem062a5~jmeFczJY83~IO89jt01yY~SHlTQXWslg~Sl63figBpM~jaF88LNS6e~cBvYFULzam~rA66hymxxP~c0WmLsFD2x~eH1k-c6qUH~9lkAIZCWYJ~v23eGReMdj~oOb1UEg_LM~8G7nApQlqf~V993dNgUQq~OwQkKFC783~RdrlEFKlk9~htyHzBnDVb~z7Evi_b7Tf~e4Va3SNH5h~2_IEt5mZob; ki_t=1613294875225%3B1613954826724%3B1613988192527%3B6%3B59\");\n        request.setAdditionalHeader(\"pragma\", \"no-cache\");\n        request.setAdditionalHeader(\"referer\", \"https://www.pixiv.net/users/3384404/illustrations?p=10\");\n        request.setAdditionalHeader(\"sec-fetch-dest\", \"empty\");\n        request.setAdditionalHeader(\"sec-fetch-mode\", \"cors\");\n        request.setAdditionalHeader(\"sec-fetch-site\", \"same-origin\");\n        request.setAdditionalHeader(\"user-agent\", userAgent);\n        request.setAdditionalHeader(\"x-user-id\", \"40925539\");\n        return request;\n    }\n}\n\n```\n3. 自定义的文件下载copy方法\n```java\npublic static void copy(InputStream is, FileOutputStream fos) throws IOException {\n        //使用缓冲流下载\n        BufferedInputStream bis = new BufferedInputStream(is);\n        BufferedOutputStream bos = new BufferedOutputStream(fos);\n        byte[] bytes = new byte[1024];\n        int len = 0;\n        if (bis != null) {\n            while ((len = bis.read(bytes)) != -1) {\n                bos.write(bytes, 0, len);\n            }\n            System.out.println(\"下载成功!\");\n        } else {\n            System.out.println(bis + \"输入流为空,下载失败\");\n        }\n        bos.close();\n        bis.close();\n    }\n```\n# 二.批量下载？\n1. 先找图片下载链接的规律 \"https://i.pximg.net/img-original/img/\"+图片发布日期+图片ID+\"_p0.jpg\"\n```xml\nhttps://i.pximg.net/img-original/img/2018/03/08/00/00/04/67623815_p0.jpg\nhttps://i.pximg.net/img-original/img/2016/11/02/00/07/26/59756502_p0.jpg\n```\n2. 所有我们只需要获得作者全部作品的id和图片发布日期，即可下载全部图片。\n![3.png](http://119.29.110.184/upload/2021/02/3-a9c90fd784eb497c94a283782306195a.png)\n```xml\nhttps://www.pixiv.net/ajax/user/27517/profile/all?lang=zh\n接口规律为\"https://www.pixiv.net/ajax/user/\" + 作者ID+ \"/profile/all?lang=zh\"\n```\n3. 浏览器访问此接口\n![4.png](http://119.29.110.184/upload/2021/02/4-235be94d97cb4204ba75813f8cedee6e.png)\n4. 发现作品ID再此json文本中，接下来就是对json的处理把ID都提取出来\n- 获取所有ID集合的方法\n```java\npublic static HashMap<String, String> getArtworks() throws IOException {\n        String allImgID = \"https://www.pixiv.net/ajax/user/\" + authorID + \"/profile/all?lang=zh\";\n        //老一套，不多说了\n        WebClient wc = new InitWebClient();\n        //使用对json请求的WebRequest方法\n        WebRequest request = GetWebRequest.json(new URL(allImgID));\n        UnexpectedPage page = wc.getPage(request);\n        InputStream is = page.getInputStream();\n        //自定义对json输入流的处理方法\n        String json = new InputStreamJson().loadJson(is);\n        //因为json里ID的value值都为null，fastjson在解析时会忽略掉，所以我将null全部进行替换\n        String replace = json.replaceAll(\"null\", \"\'zhezhi\'\");\n        //因为json数据为多层嵌套，进行逐层解析\n        String body = JSONObject.parseObject(replace).getString(\"body\");\n        String illusts = JSONObject.parseObject(body).getString(\"illusts\");\n        //将json数据封装成map对象key为ID，value为zhezhi\n        HashMap map = JSON.parseObject(illusts, HashMap.class);\n        AtomicInteger i = new AtomicInteger(0);\n        map.forEach((key, value) -> {\n            System.out.println(key);\n            i.getAndIncrement();\n        });\n        System.out.println(\"总计作品\" + i + \"张\");\n        return map;\n    }\n```\n- 新的request请求标头，名称前有冒号\':\'的不用写,具体可以查看我前面的示例\n![5.png](http://119.29.110.184/upload/2021/02/5-130ad24d18d745f3885b970aa512e381.png)\n- json输入流转字符串的方法\n```java\npackage xyz.zhezhi.util;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\npublic class InputStreamJson {\n    public static String loadJson (InputStream is) {\n        StringBuilder json = new StringBuilder();\n        try {\n            InputStreamReader isr = new InputStreamReader(is, \"utf-8\");\n            char[] buffer = new char[1024];\n            int len =0;\n            while ( (len = isr.read(buffer)) != -1) {\n                json.append(buffer,0,len);\n            }\n            isr.close();\n            is.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return json.toString();\n    }\n}\n\n```\n5. 有了所有作品ID，接下来就是对每个ID的发布日期进行获取，在进入作品详情页时会发现一个请求-\"https://www.pixiv.net/ajax/illust/\" + id + \"?lang=zh\"\n![6.png](http://119.29.110.184/upload/2021/02/6-b7239b9fac8145319dd9de782e41db81.png)\n- 访问此接口\n![7.png](http://119.29.110.184/upload/2021/02/7-c15eedb814394135be7f163dd1c255fd.png)\n- 生成图片信息并下载\n```java\npublic static void GenerateImage() {\n        WebClient wc = null;\n        try {\n            System.out.println(\"生成imageURL中\");\n            //获取作者所有的作品ID集合\n            HashMap<String, String> artworks = pixiv.getArtworks();\n            String[] ids = artworks.keySet().toArray(new String[0]);\n            //image下载url的前缀和后缀，字符串拼接对象\n            String prefix = \"https://i.pximg.net/img-original/img/\";\n            String suffix = \"_p0.jpg\";\n            wc = new InitWebClient();\n            WebRequest request = null;\n            for (String id : ids) {\n                //生成作品json接口\n                System.out.println(\"拼接-\" + id + \"-json中\");\n                URL json_url = new URL(\"https://www.pixiv.net/ajax/illust/\" + id + \"?lang=zh\");\n                request = GetWebRequest.oneImageJson(json_url);\n                Page page = wc.getPage(request);\n                WebResponse response = page.getWebResponse();\n                InputStream is = null;\n                if (response.getContentType().equals(\"application/json\")) {\n                    is = response.getContentAsStream();\n                } else {\n                    System.out.println(\"content-type属性错误\" + response.getContentType());\n                    if (response.getContentType().equals(\"text/plain\")) {\n                        System.out.println(\"跳出循环\");\n                        continue;\n                    }\n                }\n                String json = InputStreamJson.loadJson(is);\n                is.close();\n                wc.getCache().clear();\n                String body = JSONObject.parseObject(json).getString(\"body\");\n                String urls = JSONObject.parseObject(body).getString(\"urls\");\n                String fileName = JSONObject.parseObject(body).getString(\"title\");\n                String origin = JSONObject.parseObject(urls).getString(\"mini\");\n                //对image的url提取真正下载地址的日期信息再拼接\n                String[] strs = origin.split(\"(?=img/)\");\n                String dateStr = strs[1].substring(4, 24);\n                //真正的下载地址\n                String download_url = prefix + dateStr + id + suffix;\n                //对filename处理去除\'/\'和\'\\\'和\'*\',\'?\'会影响文件下载路径的符号\n                fileName = fileName.replaceAll(\"[\\\\\\\\|/|\\\\*|-|.|?]\", \"\");\n                //我自定义的图片类，保护图片ID，下载地址，图片名称\n                Image image = new Image(id, download_url, fileName);\n                downloadImage(image);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            wc.close();\n        }\n        System.out.println(\"全部下载完成\");\n    }\n```\n- 图片下载类\n```java\npublic static void downloadImage(Image image) throws IOException {\n        String id = image.getId();\n        String download_url = image.getDownload_url();\n        String fileName = image.getFileName();\n        //如果下载到一半终止，或者改图片以及下载会根据本地文件名的id和将要下载的id比对，不一致继续下载，反之return方法\n        Boolean isExist = null;\n        try {\n            isExist = isExist(id);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        if (isExist) {\n            System.out.println(\"终止下载\");\n            return;\n        }\n        System.out.println(\"预下载作品->\" + fileName + \"->\" + download_url);\n        //线程休眠-防止程序爬取太快\n        Random random = new Random();\n        int i = random.nextInt(10);\n        try {\n            System.out.println(\"休眠中,时间为:\" + i + \"秒\");\n            Thread.sleep(i * 1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        //获取下载目标的url和文件名\n        WebClient wc = new InitWebClient();\n        //因为pixiv的原图地址，图片存在两种格式.jpg和.png,如果访问不正确会报404，需要先测试获得状态码，在对url的.png进行修改成.jpg\n        int statusCode = 0;\n        try {\n            WebRequest testRequest = GetWebRequest.downloadImage(new URL(download_url));\n            statusCode = wc.getPage(testRequest).getWebResponse().getStatusCode();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            wc.getCache().clear();\n        }\n        System.out.println(\"下载地址状态码:\" + statusCode);\n        String format = \".jpg\";\n        if (statusCode == 404) {\n            download_url = download_url.replaceAll(\".jpg\", \".png\");\n            System.out.println(\"修改后的地址->\" + download_url);\n            format = \".png\";\n        }\n        //下载\n        String download_name = id + \"-\" + fileName + format;\n        try {\n            WebRequest downloadRequest = GetWebRequest.downloadImage(new URL(download_url));\n            InputStream is = wc.getPage(downloadRequest).getWebResponse().getContentAsStreamWithBomIfApplicable();\n            FileOutputStream fileOutputStream = new FileOutputStream(new File(downloadPath + download_name));\n            System.out.println(\"下载->\" + download_url);\n            copy(is, fileOutputStream);\n            is.close();\n            fileOutputStream.close();\n            System.out.println(\"文件名为->\" + download_name);\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        System.out.println(\"--------------\");\n    }\n```\n# 三. 主类一览\n```java\npackage xyz.zhezhi.app;\n\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONObject;\nimport com.gargoylesoftware.htmlunit.*;\nimport xyz.zhezhi.pojo.Image;\nimport xyz.zhezhi.util.GetWebRequest;\nimport xyz.zhezhi.util.InitWebClient;\nimport xyz.zhezhi.util.InputStreamJson;\nimport java.io.*;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.util.*;\nimport java.util.concurrent.atomic.AtomicInteger;\npublic class pixiv {\n	//作者ID\n    private static String authorID = \"10606052\";\n	//下载的文件夹，注意以\\\\结尾\n    private static String downloadPath = \"D:\\\\download\\\\pixiv\\\\1\\\\\";\n    public static void main(String[] args) throws IOException {\n        GenerateImage();\n    }\n\n    public static void GenerateImage() {\n        WebClient wc = null;\n        try {\n            System.out.println(\"生成imageURL中\");\n            //获取作者所有的作品ID集合\n            HashMap<String, String> artworks = pixiv.getArtworks();\n            String[] ids = artworks.keySet().toArray(new String[0]);\n            //image下载url的前缀和后缀，字符串拼接对象\n            String prefix = \"https://i.pximg.net/img-original/img/\";\n            String suffix = \"_p0.jpg\";\n            wc = new InitWebClient();\n            WebRequest request = null;\n            for (String id : ids) {\n                //生成作品json接口\n                System.out.println(\"拼接-\" + id + \"-json中\");\n                URL json_url = new URL(\"https://www.pixiv.net/ajax/illust/\" + id + \"?lang=zh\");\n                request = GetWebRequest.oneImageJson(json_url);\n                Page page = wc.getPage(request);\n                WebResponse response = page.getWebResponse();\n                InputStream is = null;\n                if (response.getContentType().equals(\"application/json\")) {\n                    is = response.getContentAsStream();\n                } else {\n                    System.out.println(\"content-type属性错误\" + response.getContentType());\n                    if (response.getContentType().equals(\"text/plain\")) {\n                        System.out.println(\"跳出循环\");\n                        continue;\n                    }\n                }\n                String json = InputStreamJson.loadJson(is);\n                is.close();\n                wc.getCache().clear();\n                String body = JSONObject.parseObject(json).getString(\"body\");\n                String urls = JSONObject.parseObject(body).getString(\"urls\");\n                String fileName = JSONObject.parseObject(body).getString(\"title\");\n                String origin = JSONObject.parseObject(urls).getString(\"mini\");\n                //对image的url提取真正下载地址的日期信息再拼接\n                String[] strs = origin.split(\"(?=img/)\");\n                String dateStr = strs[1].substring(4, 24);\n                //真正的下载地址\n                String download_url = prefix + dateStr + id + suffix;\n                //对filename处理去除\'/\'和\'\\\'和\'*\',\'?\'会影响文件下载路径的符号\n                fileName = fileName.replaceAll(\"[\\\\\\\\|/|\\\\*|-|.|?]\", \"\");\n                Image image = new Image(id, download_url, fileName);\n                downloadImage(image);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            wc.close();\n        }\n        System.out.println(\"全部下载完成\");\n    }\n\n    public static void downloadImage(Image image) throws IOException {\n        String id = image.getId();\n        String download_url = image.getDownload_url();\n        String fileName = image.getFileName();\n        //如果下载到一半终止，或者改图片以及下载会根据本地文件名的id和将要下载的id比对，不一致继续下载，反之return方法\n        Boolean isExist = null;\n        try {\n	//isExist()方法在下面可以看到\n            isExist = isExist(id);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        if (isExist) {\n            System.out.println(\"终止下载\");\n            return;\n        }\n        System.out.println(\"预下载作品->\" + fileName + \"->\" + download_url);\n        //线程休眠-防止程序爬取太快\n        Random random = new Random();\n        int i = random.nextInt(10);\n        try {\n            System.out.println(\"休眠中,时间为:\" + i + \"秒\");\n            Thread.sleep(i * 1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        //获取下载目标的url和文件名\n        WebClient wc = new InitWebClient();\n        //因为pixiv的原图地址，图片存在两种格式.jpg和.png,如果访问不正确会报404，需要先测试获得状态码，在对url的.png进行修改成.jpg\n        int statusCode = 0;\n        try {\n            WebRequest testRequest = GetWebRequest.downloadImage(new URL(download_url));\n            statusCode = wc.getPage(testRequest).getWebResponse().getStatusCode();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            wc.getCache().clear();\n        }\n        System.out.println(\"下载地址状态码:\" + statusCode);\n        String format = \".jpg\";\n        if (statusCode == 404) {\n            download_url = download_url.replaceAll(\".jpg\", \".png\");\n            System.out.println(\"修改后的地址->\" + download_url);\n            format = \".png\";\n        }\n        //下载\n        String download_name = id + \"-\" + fileName + format;\n        try {\n            WebRequest downloadRequest = GetWebRequest.downloadImage(new URL(download_url));\n            InputStream is = wc.getPage(downloadRequest).getWebResponse().getContentAsStreamWithBomIfApplicable();\n            FileOutputStream fileOutputStream = new FileOutputStream(new File(downloadPath + download_name));\n            System.out.println(\"下载->\" + download_url);\n            copy(is, fileOutputStream);\n            is.close();\n            fileOutputStream.close();\n            System.out.println(\"文件名为->\" + download_name);\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        System.out.println(\"--------------\");\n    }\n    public static void copy(InputStream is, FileOutputStream fos) throws IOException {\n        //使用缓冲流下载\n        BufferedInputStream bis = new BufferedInputStream(is);\n        BufferedOutputStream bos = new BufferedOutputStream(fos);\n        byte[] bytes = new byte[1024];\n        int len = 0;\n        if (bis != null) {\n            while ((len = bis.read(bytes)) != -1) {\n                bos.write(bytes, 0, len);\n            }\n            System.out.println(\"下载成功!\");\n        } else {\n            System.out.println(bis + \"输入流为空,下载失败\");\n        }\n        bos.close();\n        bis.close();\n    }\n\n\n    public static HashMap<String, String> getArtworks() throws IOException {\n        String allImgID = \"https://www.pixiv.net/ajax/user/\" + authorID + \"/profile/all?lang=zh\";\n        //老一套，不多说了\n        WebClient wc = new InitWebClient();\n        //使用对json请求的WebRequest方法\n        WebRequest request = GetWebRequest.json(new URL(allImgID));\n        UnexpectedPage page = wc.getPage(request);\n        InputStream is = page.getInputStream();\n        //自定义对json输入流的处理\n        String json = new InputStreamJson().loadJson(is);\n        //因为json里ID的value值都为null，fastjson在解析时会忽略掉，所以我将null全部进行替换\n        String replace = json.replaceAll(\"null\", \"\'zhezhi\'\");\n        //因为json数据为多层嵌套，进行逐层解析\n        String body = JSONObject.parseObject(replace).getString(\"body\");\n        String illusts = JSONObject.parseObject(body).getString(\"illusts\");\n        //将json数据封装成map对象key为ID，value为zhezhi\n        HashMap map = JSON.parseObject(illusts, HashMap.class);\n        AtomicInteger i = new AtomicInteger(0);\n        map.forEach((key, value) -> {\n            System.out.println(key);\n            i.getAndIncrement();\n        });\n        System.out.println(\"总计作品\" + i + \"张\");\n        return map;\n    }\n\n    public static Boolean isExist(String id) throws IOException {\n        Boolean isEqual = false;\n        File filePath = new File(downloadPath);\n        if (!filePath.exists()) {\n            filePath.mkdir();\n        }\n        File[] files = filePath.listFiles();\n        int i = 0;\n        for (File file : files) {\n            String local_name = file.getName();\n            String[] split = local_name.split(\"[-]\");\n            if (id.equals(split[0])) {\n                isEqual = true;\n                System.out.println(\"已下载在本地\");\n                return isEqual;\n            } else {\n                i++;\n            }\n        }\n        System.out.println(\"无本地ID*\" + i);\n        return isEqual;\n    }\n\n}\n```\n# 四.BUG问题\n1. p站的图片会有动图形式，会下载不完全(大小为48kb)，原因具体自己可以访问动图时的网络详情，动图例https://www.pixiv.net/artworks/86309818\n2. 会遇到下载png格式时，下载大小为0kb且文件名为id+名称，没有格式，可能为这里所导致，将download_name 的format写死成\'.jpg\'\n```java\nSystem.out.println(\"下载地址状态码:\" + statusCode);\n        String format = \".jpg\";\n        if (statusCode == 404) {\n            download_url = download_url.replaceAll(\".jpg\", \".png\");\n            System.out.println(\"修改后的地址->\" + download_url);\n            format = \".png\";\n        }\n        //下载\n        String download_name = id + \"-\" + fileName + format;\n```\n',
        0, '2021-09-06 08:17:51', '2021-09-06 08:17:51');
/*!40000 ALTER TABLE `blog` ENABLE KEYS */;
UNLOCK
TABLES;

--
-- Table structure for table `user`
--

DROP TABLE IF EXISTS `user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user`
(
    `id`          bigint(23) NOT NULL COMMENT '用户id',
    `name`        varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '用户名称',
    `password`    varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '用户密码',
    `email`       varchar(30) COLLATE utf8mb4_unicode_ci  DEFAULT NULL COMMENT '用户邮箱',
    `avatar`      varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '用户头像',
    `intro`       varchar(50) COLLATE utf8mb4_unicode_ci  DEFAULT NULL COMMENT '个人介绍',
    `deleted`     int(11) NOT NULL DEFAULT 0 COMMENT 'mybatis逻辑删除',
    `create_time` datetime                                DEFAULT NULL COMMENT '创建时间',
    `update_time` datetime                                DEFAULT NULL COMMENT '更新时间',
    PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='用户信息表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user`
--

LOCK
TABLES `user` WRITE;
/*!40000 ALTER TABLE `user` DISABLE KEYS */;
INSERT INTO `user`
VALUES (1428556050647941121, 'zhezhi', '3103ae6fe92b5588a762bb24455fb8d9', '2544438809@qq.com',
        'http://127.0.0.1:8087/user/getAvatar/1428556050647941121.jpeg', 'hello!word', 0, '2021-08-20 11:14:38',
        '2021-08-20 11:14:38'),
       (1434738957386801153, 'hhh', '3103ae6fe92b5588a762bb24455fb8d9', '25@qq.com',
        'http://127.0.0.1:8087/user/getAvatar/1434738957386801153.png', NULL, 0, '2021-09-06 12:43:18',
        '2021-09-06 12:43:18');
/*!40000 ALTER TABLE `user` ENABLE KEYS */;
UNLOCK
TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2021-09-11 14:23:11
